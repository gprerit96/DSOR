#include <stdio.h>
#include <stdlib.h>

struct nodetype{
    char temp_matrix[3][3];
    int EP;
};
typedef struct nodetype *EP_node;

EP_node getnode(){
    EP_node p;
    p=(EP_node)malloc(sizeof(struct nodetype));
    return p;
}

EP_node evaluateNext(char(*)[3],int,char,char,char);
int calEP(char(*)[3],char);
int isWinner(char(*)[3],char);
void printMatrix(char(*)[3]);

int main()
{
    char choice=0;
    char matrix[3][3]={{'-','-','-'},{'-','-','-'},{'-','-','-'}};
    int i=0,j=0;
    int turn=2;

    printf("X:Player 1\nO:Player 2\n");
    printf("Enter whose turn: ");
    scanf(" %c",&choice);
    printf("Entered choice: %c\n",choice);

    if(choice!='X'&&choice!='O'){
        printf("Invalid Input\n");
        return 0;
    }

    printf("\nInput board position:\n");
    for(i=0;i<3;i++)
        for(j=0;j<3;j++){
            printf("Matrix[%d][%d]: ",i+1,j+1);
            scanf(" %c",&matrix[i][j]);
        }

    printf("\nGrid Status:\n");
    printMatrix(matrix);

    if(!(isMovesLeft(matrix))){
        printf("\nMatch Drawn\n");
        return 0;
    }

    char flag='p';
    EP_node p;
    p=getnode();

    p=evaluateNext(matrix,turn,choice,flag,choice);
    printf("\nValue: %d",p->EP);

    printf("\nBest move for the player:\n");
    printMatrix(p->temp_matrix);

    return 0;
}

int isMovesLeft(char matrix[3][3]){
    int i=0,j=0;

    for(i=0;i<3;i++)
        for(j=0;j<3;j++)
            if(matrix[i][j]=='-')
                return 1;

    return 0;
}

EP_node evaluateNext(char matrix[][3],int turn,char ch,char flag,char start_ch){
    int i=0;
    int j=0;
    int k=0,l=0;
    int EPmax=0;
    int EPmin=8;
    int EP=0;
    char next_flag=' ';
    EP_node p;
    p=getnode();

    if(turn==1){
        for(i=0;i<3;i++)
            for(j=0;j<3;j++){
                if(matrix[i][j]=='-'){
                    matrix[i][j]=ch;

                    printf("\nTurn: %d",turn);
                    printf("\nPresent Status:\n");
                    printMatrix(matrix);

                    /*if(isWinner(matrix,ch)){
                        if(flag=='p')
                            p->EP = 8;
                        else
                            p->EP = -8;

                        for(k=0;k<3;k++)
                            for(l=0;l<3;l++)
                                p->temp_matrix[k][l]=matrix[k][l];

                        return p;
                    }*/

                    EP=calEP(matrix,start_ch);

                    printf("\nTurn %d EP: %d\n\n",turn,EP);

                    if(flag=='p'){
                        if(EPmax<EP){
                            EPmax=EP;

                            for(k=0;k<3;k++)
                                for(l=0;l<3;l++)
                                    p->temp_matrix[k][l]=matrix[k][l];
                        }
                    }
                    else{
                        if(EPmin>EP){
                            EPmin=EP;

                            for(k=0;k<3;k++)
                                for(l=0;l<3;l++)
                                    p->temp_matrix[k][l]=matrix[k][l];
                        }
                    }

                    matrix[i][j]='-';
                }
            }

        if(flag=='p')
            p->EP=EPmax;
        else
            p->EP=EPmin;

        return p;
    }

    for(i=0;i<3;i++)
        for(j=0;j<3;j++){
            if(matrix[i][j]=='-'){
                matrix[i][j]=ch;

                /*if(isWinner(matrix,ch)){
                    if(flag=='p')
                        p->EP= 8;
                    else
                        p->EP= -8;

                    for(k=0;k<3;k++)
                        for(l=0;l<3;l++)
                            p->temp_matrix[k][l]=matrix[k][l];

                    return p;
                }*/

                if(flag=='p')
                    next_flag='n';
                else
                    next_flag='p';

                if(ch=='X')
                    p=evaluateNext(matrix,turn-1,'O',next_flag,start_ch);
                else
                    p=evaluateNext(matrix,turn-1,'X',next_flag,start_ch);

                printf("\nTurn %d EP: %d\n\n",turn,p->EP);

                if(flag=='p'){
                    if(EPmax<p->EP){
                        EPmax=p->EP;

                        for(k=0;k<3;k++)
                            for(l=0;l<3;l++)
                                p->temp_matrix[k][l]=matrix[k][l];
                    }
                }
                else{
                    if(EPmin>EP){
                        EPmin=EP;

                        for(k=0;k<3;k++)
                            for(l=0;l<3;l++)
                                p->temp_matrix[k][l]=matrix[k][l];
                    }
                }

                matrix[i][j]='-';
            }
        }

    if(flag=='p')
        p->EP=EPmax;
    else
        p->EP=EPmin;

    return p;
}

int calEP(char matrix[][3],char ch){
    int i=0;
    int count=0;

    if(isWinner(matrix,ch))
        return 8;

    for(i=0;i<3;i++)
        if((matrix[i][0]=='X'||matrix[i][1]=='X'||matrix[i][2]=='X')&&!(matrix[i][0]=='O'||matrix[i][1]=='O'||matrix[i][2]=='O'))
            count++;

    for(i=0;i<3;i++)
        if((matrix[0][i]=='X'||matrix[1][i]=='X'||matrix[2][i]=='X')&&!(matrix[0][i]=='O'||matrix[1][i]=='O'||matrix[2][i]=='O'))
            count++;

    if((matrix[0][2]=='X'||matrix[1][1]=='X'||matrix[2][0]=='X')&&!(matrix[0][2]=='O'||matrix[1][1]=='O'||matrix[2][0]=='O'))
        count++;

    if((matrix[0][0]=='X'||matrix[1][1]=='X'||matrix[2][2]=='X')&&!(matrix[0][0]=='O'||matrix[1][1]=='O'||matrix[2][2]=='O'))
        count++;


    for(i=0;i<3;i++)
        if((matrix[i][0]=='O'||matrix[i][1]=='O'||matrix[i][2]=='O')&&!(matrix[i][0]=='X'||matrix[i][1]=='X'||matrix[i][2]=='X'))
            count--;

    for(i=0;i<3;i++)
        if((matrix[0][i]=='O'||matrix[1][i]=='O'||matrix[2][i]=='O')&&!(matrix[0][i]=='X'||matrix[1][i]=='X'||matrix[2][i]=='X'))
            count--;

    if((matrix[0][2]=='O'||matrix[1][1]=='O'||matrix[2][0]=='O')&&!(matrix[0][2]=='X'||matrix[1][1]=='X'||matrix[2][0]=='X'))
        count--;

    if((matrix[0][0]=='O'||matrix[1][1]=='O'||matrix[2][2]=='O')&&!(matrix[0][0]=='X'||matrix[1][1]=='X'||matrix[2][2]=='X'))
        count--;

    if(ch=='X')
        return count;

    return count*(-1);
}

int isWinner(char matrix[][3],char ch){
    int i=0;

    for(i=0;i<3;i++)
        if(matrix[i][0]==ch && matrix[i][1]==ch && matrix[i][2]==ch)
            return 1;

    for(i=0;i<3;i++)
        if(matrix[0][i]==ch && matrix[1][i]==ch && matrix[2][i]==ch)
            return 1;

    if(matrix[0][2]==ch && matrix[1][1]==ch && matrix[2][0]==ch)
       return 1;

    if(matrix[0][0]==ch && matrix[1][1]==ch && matrix[2][2]==ch)
        return 1;

    return 0;
}

void printMatrix(char matrix[][3]){
    int i=0,j=0;

    for(i=0;i<3;i++){
        for(j=0;j<3;j++)
            printf(" %c",matrix[i][j]);

        printf("\n");
    }
}
